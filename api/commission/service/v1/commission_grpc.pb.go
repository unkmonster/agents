// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--dev
// source: api/commission/service/v1/commission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Commission_HandleOrderCommission_FullMethodName    = "/api.commission.service.v1.Commission/HandleOrderCommission"
	Commission_GetUserCommission_FullMethodName        = "/api.commission.service.v1.Commission/GetUserCommission"
	Commission_ListCommission_FullMethodName           = "/api.commission.service.v1.Commission/ListCommission"
	Commission_ListCommissionByParent_FullMethodName   = "/api.commission.service.v1.Commission/ListCommissionByParent"
	Commission_InitUserCommission_FullMethodName       = "/api.commission.service.v1.Commission/InitUserCommission"
	Commission_IncUserRegistrationCount_FullMethodName = "/api.commission.service.v1.Commission/IncUserRegistrationCount"
)

// CommissionClient is the client API for Commission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommissionClient interface {
	HandleOrderCommission(ctx context.Context, in *HandleOrderCommissionRequest, opts ...grpc.CallOption) (*HandleOrderCommissionReply, error)
	GetUserCommission(ctx context.Context, in *GetUserCommissionRequest, opts ...grpc.CallOption) (*GetUserCommissionReply, error)
	ListCommission(ctx context.Context, in *ListCommissionRequest, opts ...grpc.CallOption) (*ListCommissionReply, error)
	ListCommissionByParent(ctx context.Context, in *ListCommissionByParentReq, opts ...grpc.CallOption) (*ListCommissionByParentReply, error)
	InitUserCommission(ctx context.Context, in *InitUserCommissionReq, opts ...grpc.CallOption) (*InitUserCommissionReply, error)
	IncUserRegistrationCount(ctx context.Context, in *IncUserRegistrationCountReq, opts ...grpc.CallOption) (*IncUserRegistrationCountReply, error)
}

type commissionClient struct {
	cc grpc.ClientConnInterface
}

func NewCommissionClient(cc grpc.ClientConnInterface) CommissionClient {
	return &commissionClient{cc}
}

func (c *commissionClient) HandleOrderCommission(ctx context.Context, in *HandleOrderCommissionRequest, opts ...grpc.CallOption) (*HandleOrderCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleOrderCommissionReply)
	err := c.cc.Invoke(ctx, Commission_HandleOrderCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) GetUserCommission(ctx context.Context, in *GetUserCommissionRequest, opts ...grpc.CallOption) (*GetUserCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCommissionReply)
	err := c.cc.Invoke(ctx, Commission_GetUserCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) ListCommission(ctx context.Context, in *ListCommissionRequest, opts ...grpc.CallOption) (*ListCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionReply)
	err := c.cc.Invoke(ctx, Commission_ListCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) ListCommissionByParent(ctx context.Context, in *ListCommissionByParentReq, opts ...grpc.CallOption) (*ListCommissionByParentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionByParentReply)
	err := c.cc.Invoke(ctx, Commission_ListCommissionByParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) InitUserCommission(ctx context.Context, in *InitUserCommissionReq, opts ...grpc.CallOption) (*InitUserCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitUserCommissionReply)
	err := c.cc.Invoke(ctx, Commission_InitUserCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) IncUserRegistrationCount(ctx context.Context, in *IncUserRegistrationCountReq, opts ...grpc.CallOption) (*IncUserRegistrationCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncUserRegistrationCountReply)
	err := c.cc.Invoke(ctx, Commission_IncUserRegistrationCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommissionServer is the server API for Commission service.
// All implementations must embed UnimplementedCommissionServer
// for forward compatibility.
type CommissionServer interface {
	HandleOrderCommission(context.Context, *HandleOrderCommissionRequest) (*HandleOrderCommissionReply, error)
	GetUserCommission(context.Context, *GetUserCommissionRequest) (*GetUserCommissionReply, error)
	ListCommission(context.Context, *ListCommissionRequest) (*ListCommissionReply, error)
	ListCommissionByParent(context.Context, *ListCommissionByParentReq) (*ListCommissionByParentReply, error)
	InitUserCommission(context.Context, *InitUserCommissionReq) (*InitUserCommissionReply, error)
	IncUserRegistrationCount(context.Context, *IncUserRegistrationCountReq) (*IncUserRegistrationCountReply, error)
	mustEmbedUnimplementedCommissionServer()
}

// UnimplementedCommissionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommissionServer struct{}

func (UnimplementedCommissionServer) HandleOrderCommission(context.Context, *HandleOrderCommissionRequest) (*HandleOrderCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOrderCommission not implemented")
}
func (UnimplementedCommissionServer) GetUserCommission(context.Context, *GetUserCommissionRequest) (*GetUserCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommission not implemented")
}
func (UnimplementedCommissionServer) ListCommission(context.Context, *ListCommissionRequest) (*ListCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommission not implemented")
}
func (UnimplementedCommissionServer) ListCommissionByParent(context.Context, *ListCommissionByParentReq) (*ListCommissionByParentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionByParent not implemented")
}
func (UnimplementedCommissionServer) InitUserCommission(context.Context, *InitUserCommissionReq) (*InitUserCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUserCommission not implemented")
}
func (UnimplementedCommissionServer) IncUserRegistrationCount(context.Context, *IncUserRegistrationCountReq) (*IncUserRegistrationCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncUserRegistrationCount not implemented")
}
func (UnimplementedCommissionServer) mustEmbedUnimplementedCommissionServer() {}
func (UnimplementedCommissionServer) testEmbeddedByValue()                    {}

// UnsafeCommissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommissionServer will
// result in compilation errors.
type UnsafeCommissionServer interface {
	mustEmbedUnimplementedCommissionServer()
}

func RegisterCommissionServer(s grpc.ServiceRegistrar, srv CommissionServer) {
	// If the following call pancis, it indicates UnimplementedCommissionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Commission_ServiceDesc, srv)
}

func _Commission_HandleOrderCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOrderCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).HandleOrderCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_HandleOrderCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).HandleOrderCommission(ctx, req.(*HandleOrderCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_GetUserCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).GetUserCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_GetUserCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).GetUserCommission(ctx, req.(*GetUserCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_ListCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).ListCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_ListCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).ListCommission(ctx, req.(*ListCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_ListCommissionByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionByParentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).ListCommissionByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_ListCommissionByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).ListCommissionByParent(ctx, req.(*ListCommissionByParentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_InitUserCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUserCommissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).InitUserCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_InitUserCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).InitUserCommission(ctx, req.(*InitUserCommissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_IncUserRegistrationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncUserRegistrationCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).IncUserRegistrationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_IncUserRegistrationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).IncUserRegistrationCount(ctx, req.(*IncUserRegistrationCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Commission_ServiceDesc is the grpc.ServiceDesc for Commission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.commission.service.v1.Commission",
	HandlerType: (*CommissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleOrderCommission",
			Handler:    _Commission_HandleOrderCommission_Handler,
		},
		{
			MethodName: "GetUserCommission",
			Handler:    _Commission_GetUserCommission_Handler,
		},
		{
			MethodName: "ListCommission",
			Handler:    _Commission_ListCommission_Handler,
		},
		{
			MethodName: "ListCommissionByParent",
			Handler:    _Commission_ListCommissionByParent_Handler,
		},
		{
			MethodName: "InitUserCommission",
			Handler:    _Commission_InitUserCommission_Handler,
		},
		{
			MethodName: "IncUserRegistrationCount",
			Handler:    _Commission_IncUserRegistrationCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commission/service/v1/commission.proto",
}
