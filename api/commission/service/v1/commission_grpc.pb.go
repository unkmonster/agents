// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--dev
// source: api/commission/service/v1/commission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Commission_HandleOrderCommission_FullMethodName                 = "/api.commission.service.v1.Commission/HandleOrderCommission"
	Commission_IncChainRegistrationCountByDirectUser_FullMethodName = "/api.commission.service.v1.Commission/IncChainRegistrationCountByDirectUser"
	Commission_GetUserTotalCommission_FullMethodName                = "/api.commission.service.v1.Commission/GetUserTotalCommission"
	Commission_ListTotalCommission_FullMethodName                   = "/api.commission.service.v1.Commission/ListTotalCommission"
	Commission_ListTotalCommissionByParent_FullMethodName           = "/api.commission.service.v1.Commission/ListTotalCommissionByParent"
	Commission_ListCommissionByUser_FullMethodName                  = "/api.commission.service.v1.Commission/ListCommissionByUser"
)

// CommissionClient is the client API for Commission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommissionClient interface {
	HandleOrderCommission(ctx context.Context, in *HandleOrderCommissionRequest, opts ...grpc.CallOption) (*HandleOrderCommissionReply, error)
	// 增加链上每个用户的注册量，通过最下游的代理 ID
	IncChainRegistrationCountByDirectUser(ctx context.Context, in *IncChainRegistrationCountByDirectUserReq, opts ...grpc.CallOption) (*IncChainRegistrationCountByDirectUserReply, error)
	// 获取指定用户的累计佣金
	GetUserTotalCommission(ctx context.Context, in *GetUserTotalCommissionRequest, opts ...grpc.CallOption) (*GetUserTotalCommissionReply, error)
	// 列出每个用户的累计佣金
	ListTotalCommission(ctx context.Context, in *ListTotalCommissionRequest, opts ...grpc.CallOption) (*ListTotalCommissionReply, error)
	// 列出每个下游代理的累计佣金
	ListTotalCommissionByParent(ctx context.Context, in *ListTotalCommissionByParentReq, opts ...grpc.CallOption) (*ListTotalCommissionByParentReply, error)
	ListCommissionByUser(ctx context.Context, in *ListCommissionByUserReq, opts ...grpc.CallOption) (*ListCommissionByUserReply, error)
}

type commissionClient struct {
	cc grpc.ClientConnInterface
}

func NewCommissionClient(cc grpc.ClientConnInterface) CommissionClient {
	return &commissionClient{cc}
}

func (c *commissionClient) HandleOrderCommission(ctx context.Context, in *HandleOrderCommissionRequest, opts ...grpc.CallOption) (*HandleOrderCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleOrderCommissionReply)
	err := c.cc.Invoke(ctx, Commission_HandleOrderCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) IncChainRegistrationCountByDirectUser(ctx context.Context, in *IncChainRegistrationCountByDirectUserReq, opts ...grpc.CallOption) (*IncChainRegistrationCountByDirectUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncChainRegistrationCountByDirectUserReply)
	err := c.cc.Invoke(ctx, Commission_IncChainRegistrationCountByDirectUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) GetUserTotalCommission(ctx context.Context, in *GetUserTotalCommissionRequest, opts ...grpc.CallOption) (*GetUserTotalCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTotalCommissionReply)
	err := c.cc.Invoke(ctx, Commission_GetUserTotalCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) ListTotalCommission(ctx context.Context, in *ListTotalCommissionRequest, opts ...grpc.CallOption) (*ListTotalCommissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTotalCommissionReply)
	err := c.cc.Invoke(ctx, Commission_ListTotalCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) ListTotalCommissionByParent(ctx context.Context, in *ListTotalCommissionByParentReq, opts ...grpc.CallOption) (*ListTotalCommissionByParentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTotalCommissionByParentReply)
	err := c.cc.Invoke(ctx, Commission_ListTotalCommissionByParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) ListCommissionByUser(ctx context.Context, in *ListCommissionByUserReq, opts ...grpc.CallOption) (*ListCommissionByUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionByUserReply)
	err := c.cc.Invoke(ctx, Commission_ListCommissionByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommissionServer is the server API for Commission service.
// All implementations must embed UnimplementedCommissionServer
// for forward compatibility.
type CommissionServer interface {
	HandleOrderCommission(context.Context, *HandleOrderCommissionRequest) (*HandleOrderCommissionReply, error)
	// 增加链上每个用户的注册量，通过最下游的代理 ID
	IncChainRegistrationCountByDirectUser(context.Context, *IncChainRegistrationCountByDirectUserReq) (*IncChainRegistrationCountByDirectUserReply, error)
	// 获取指定用户的累计佣金
	GetUserTotalCommission(context.Context, *GetUserTotalCommissionRequest) (*GetUserTotalCommissionReply, error)
	// 列出每个用户的累计佣金
	ListTotalCommission(context.Context, *ListTotalCommissionRequest) (*ListTotalCommissionReply, error)
	// 列出每个下游代理的累计佣金
	ListTotalCommissionByParent(context.Context, *ListTotalCommissionByParentReq) (*ListTotalCommissionByParentReply, error)
	ListCommissionByUser(context.Context, *ListCommissionByUserReq) (*ListCommissionByUserReply, error)
	mustEmbedUnimplementedCommissionServer()
}

// UnimplementedCommissionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommissionServer struct{}

func (UnimplementedCommissionServer) HandleOrderCommission(context.Context, *HandleOrderCommissionRequest) (*HandleOrderCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOrderCommission not implemented")
}
func (UnimplementedCommissionServer) IncChainRegistrationCountByDirectUser(context.Context, *IncChainRegistrationCountByDirectUserReq) (*IncChainRegistrationCountByDirectUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncChainRegistrationCountByDirectUser not implemented")
}
func (UnimplementedCommissionServer) GetUserTotalCommission(context.Context, *GetUserTotalCommissionRequest) (*GetUserTotalCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTotalCommission not implemented")
}
func (UnimplementedCommissionServer) ListTotalCommission(context.Context, *ListTotalCommissionRequest) (*ListTotalCommissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTotalCommission not implemented")
}
func (UnimplementedCommissionServer) ListTotalCommissionByParent(context.Context, *ListTotalCommissionByParentReq) (*ListTotalCommissionByParentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTotalCommissionByParent not implemented")
}
func (UnimplementedCommissionServer) ListCommissionByUser(context.Context, *ListCommissionByUserReq) (*ListCommissionByUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionByUser not implemented")
}
func (UnimplementedCommissionServer) mustEmbedUnimplementedCommissionServer() {}
func (UnimplementedCommissionServer) testEmbeddedByValue()                    {}

// UnsafeCommissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommissionServer will
// result in compilation errors.
type UnsafeCommissionServer interface {
	mustEmbedUnimplementedCommissionServer()
}

func RegisterCommissionServer(s grpc.ServiceRegistrar, srv CommissionServer) {
	// If the following call pancis, it indicates UnimplementedCommissionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Commission_ServiceDesc, srv)
}

func _Commission_HandleOrderCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOrderCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).HandleOrderCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_HandleOrderCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).HandleOrderCommission(ctx, req.(*HandleOrderCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_IncChainRegistrationCountByDirectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncChainRegistrationCountByDirectUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).IncChainRegistrationCountByDirectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_IncChainRegistrationCountByDirectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).IncChainRegistrationCountByDirectUser(ctx, req.(*IncChainRegistrationCountByDirectUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_GetUserTotalCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTotalCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).GetUserTotalCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_GetUserTotalCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).GetUserTotalCommission(ctx, req.(*GetUserTotalCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_ListTotalCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTotalCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).ListTotalCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_ListTotalCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).ListTotalCommission(ctx, req.(*ListTotalCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_ListTotalCommissionByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTotalCommissionByParentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).ListTotalCommissionByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_ListTotalCommissionByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).ListTotalCommissionByParent(ctx, req.(*ListTotalCommissionByParentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_ListCommissionByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).ListCommissionByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commission_ListCommissionByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).ListCommissionByUser(ctx, req.(*ListCommissionByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Commission_ServiceDesc is the grpc.ServiceDesc for Commission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.commission.service.v1.Commission",
	HandlerType: (*CommissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleOrderCommission",
			Handler:    _Commission_HandleOrderCommission_Handler,
		},
		{
			MethodName: "IncChainRegistrationCountByDirectUser",
			Handler:    _Commission_IncChainRegistrationCountByDirectUser_Handler,
		},
		{
			MethodName: "GetUserTotalCommission",
			Handler:    _Commission_GetUserTotalCommission_Handler,
		},
		{
			MethodName: "ListTotalCommission",
			Handler:    _Commission_ListTotalCommission_Handler,
		},
		{
			MethodName: "ListTotalCommissionByParent",
			Handler:    _Commission_ListTotalCommissionByParent_Handler,
		},
		{
			MethodName: "ListCommissionByUser",
			Handler:    _Commission_ListCommissionByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commission/service/v1/commission.proto",
}
