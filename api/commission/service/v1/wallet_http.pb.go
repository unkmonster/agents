// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--dev
// source: api/commission/service/v1/wallet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWalletCreateWallet = "/api.commission.service.v1.Wallet/CreateWallet"
const OperationWalletDeleteWallet = "/api.commission.service.v1.Wallet/DeleteWallet"
const OperationWalletGetWallet = "/api.commission.service.v1.Wallet/GetWallet"
const OperationWalletListWallet = "/api.commission.service.v1.Wallet/ListWallet"
const OperationWalletListWalletByUser = "/api.commission.service.v1.Wallet/ListWalletByUser"
const OperationWalletUpdateWallet = "/api.commission.service.v1.Wallet/UpdateWallet"

type WalletHTTPServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletReply, error)
	DeleteWallet(context.Context, *DeleteWalletRequest) (*DeleteWalletReply, error)
	GetWallet(context.Context, *GetWalletRequest) (*GetWalletReply, error)
	ListWallet(context.Context, *ListWalletRequest) (*ListWalletReply, error)
	ListWalletByUser(context.Context, *ListWalletByUserRequest) (*ListWalletReply, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletReply, error)
}

func RegisterWalletHTTPServer(s *http.Server, srv WalletHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/users/{user_id}/wallets", _Wallet_CreateWallet0_HTTP_Handler(srv))
	r.PATCH("/v1/wallets/{id}", _Wallet_UpdateWallet0_HTTP_Handler(srv))
	r.DELETE("/v1/wallets/{id}", _Wallet_DeleteWallet0_HTTP_Handler(srv))
	r.GET("/v1/wallets/{id}", _Wallet_GetWallet0_HTTP_Handler(srv))
	r.GET("/v1/wallets", _Wallet_ListWallet0_HTTP_Handler(srv))
	r.GET("/v1/users/{user_id}/wallets", _Wallet_ListWalletByUser0_HTTP_Handler(srv))
}

func _Wallet_CreateWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletCreateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWallet(ctx, req.(*CreateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_UpdateWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletUpdateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWallet(ctx, req.(*UpdateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_DeleteWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWalletRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletDeleteWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWallet(ctx, req.(*DeleteWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_GetWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletGetWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWallet(ctx, req.(*GetWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_ListWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWalletRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletListWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWallet(ctx, req.(*ListWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_ListWalletByUser0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWalletByUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletListWalletByUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWalletByUser(ctx, req.(*ListWalletByUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWalletReply)
		return ctx.Result(200, reply)
	}
}

type WalletHTTPClient interface {
	CreateWallet(ctx context.Context, req *CreateWalletRequest, opts ...http.CallOption) (rsp *CreateWalletReply, err error)
	DeleteWallet(ctx context.Context, req *DeleteWalletRequest, opts ...http.CallOption) (rsp *DeleteWalletReply, err error)
	GetWallet(ctx context.Context, req *GetWalletRequest, opts ...http.CallOption) (rsp *GetWalletReply, err error)
	ListWallet(ctx context.Context, req *ListWalletRequest, opts ...http.CallOption) (rsp *ListWalletReply, err error)
	ListWalletByUser(ctx context.Context, req *ListWalletByUserRequest, opts ...http.CallOption) (rsp *ListWalletReply, err error)
	UpdateWallet(ctx context.Context, req *UpdateWalletRequest, opts ...http.CallOption) (rsp *UpdateWalletReply, err error)
}

type WalletHTTPClientImpl struct {
	cc *http.Client
}

func NewWalletHTTPClient(client *http.Client) WalletHTTPClient {
	return &WalletHTTPClientImpl{client}
}

func (c *WalletHTTPClientImpl) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...http.CallOption) (*CreateWalletReply, error) {
	var out CreateWalletReply
	pattern := "/v1/users/{user_id}/wallets"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletCreateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) DeleteWallet(ctx context.Context, in *DeleteWalletRequest, opts ...http.CallOption) (*DeleteWalletReply, error) {
	var out DeleteWalletReply
	pattern := "/v1/wallets/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletDeleteWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...http.CallOption) (*GetWalletReply, error) {
	var out GetWalletReply
	pattern := "/v1/wallets/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletGetWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) ListWallet(ctx context.Context, in *ListWalletRequest, opts ...http.CallOption) (*ListWalletReply, error) {
	var out ListWalletReply
	pattern := "/v1/wallets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletListWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) ListWalletByUser(ctx context.Context, in *ListWalletByUserRequest, opts ...http.CallOption) (*ListWalletReply, error) {
	var out ListWalletReply
	pattern := "/v1/users/{user_id}/wallets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletListWalletByUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...http.CallOption) (*UpdateWalletReply, error) {
	var out UpdateWalletReply
	pattern := "/v1/wallets/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletUpdateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
