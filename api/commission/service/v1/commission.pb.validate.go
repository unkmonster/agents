// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/commission/service/v1/commission.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IncUserRegistrationCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncUserRegistrationCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncUserRegistrationCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncUserRegistrationCountReqMultiError, or nil if none found.
func (m *IncUserRegistrationCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IncUserRegistrationCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := IncUserRegistrationCountReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncUserRegistrationCountReqMultiError(errors)
	}

	return nil
}

// IncUserRegistrationCountReqMultiError is an error wrapping multiple
// validation errors returned by IncUserRegistrationCountReq.ValidateAll() if
// the designated constraints aren't met.
type IncUserRegistrationCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncUserRegistrationCountReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncUserRegistrationCountReqMultiError) AllErrors() []error { return m }

// IncUserRegistrationCountReqValidationError is the validation error returned
// by IncUserRegistrationCountReq.Validate if the designated constraints
// aren't met.
type IncUserRegistrationCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncUserRegistrationCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncUserRegistrationCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncUserRegistrationCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncUserRegistrationCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncUserRegistrationCountReqValidationError) ErrorName() string {
	return "IncUserRegistrationCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e IncUserRegistrationCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncUserRegistrationCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncUserRegistrationCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncUserRegistrationCountReqValidationError{}

// Validate checks the field values on IncUserRegistrationCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncUserRegistrationCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncUserRegistrationCountReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IncUserRegistrationCountReplyMultiError, or nil if none found.
func (m *IncUserRegistrationCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IncUserRegistrationCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncUserRegistrationCountReplyMultiError(errors)
	}

	return nil
}

// IncUserRegistrationCountReplyMultiError is an error wrapping multiple
// validation errors returned by IncUserRegistrationCountReply.ValidateAll()
// if the designated constraints aren't met.
type IncUserRegistrationCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncUserRegistrationCountReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncUserRegistrationCountReplyMultiError) AllErrors() []error { return m }

// IncUserRegistrationCountReplyValidationError is the validation error
// returned by IncUserRegistrationCountReply.Validate if the designated
// constraints aren't met.
type IncUserRegistrationCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncUserRegistrationCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncUserRegistrationCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncUserRegistrationCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncUserRegistrationCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncUserRegistrationCountReplyValidationError) ErrorName() string {
	return "IncUserRegistrationCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IncUserRegistrationCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncUserRegistrationCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncUserRegistrationCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncUserRegistrationCountReplyValidationError{}

// Validate checks the field values on InitUserCommissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitUserCommissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitUserCommissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitUserCommissionReqMultiError, or nil if none found.
func (m *InitUserCommissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InitUserCommissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := InitUserCommissionReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InitUserCommissionReqMultiError(errors)
	}

	return nil
}

// InitUserCommissionReqMultiError is an error wrapping multiple validation
// errors returned by InitUserCommissionReq.ValidateAll() if the designated
// constraints aren't met.
type InitUserCommissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitUserCommissionReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitUserCommissionReqMultiError) AllErrors() []error { return m }

// InitUserCommissionReqValidationError is the validation error returned by
// InitUserCommissionReq.Validate if the designated constraints aren't met.
type InitUserCommissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitUserCommissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitUserCommissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitUserCommissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitUserCommissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitUserCommissionReqValidationError) ErrorName() string {
	return "InitUserCommissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e InitUserCommissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitUserCommissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitUserCommissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitUserCommissionReqValidationError{}

// Validate checks the field values on InitUserCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitUserCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitUserCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitUserCommissionReplyMultiError, or nil if none found.
func (m *InitUserCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InitUserCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitUserCommissionReplyMultiError(errors)
	}

	return nil
}

// InitUserCommissionReplyMultiError is an error wrapping multiple validation
// errors returned by InitUserCommissionReply.ValidateAll() if the designated
// constraints aren't met.
type InitUserCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitUserCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitUserCommissionReplyMultiError) AllErrors() []error { return m }

// InitUserCommissionReplyValidationError is the validation error returned by
// InitUserCommissionReply.Validate if the designated constraints aren't met.
type InitUserCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitUserCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitUserCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitUserCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitUserCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitUserCommissionReplyValidationError) ErrorName() string {
	return "InitUserCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e InitUserCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitUserCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitUserCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitUserCommissionReplyValidationError{}

// Validate checks the field values on HandleOrderCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleOrderCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleOrderCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleOrderCommissionRequestMultiError, or nil if none found.
func (m *HandleOrderCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleOrderCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := HandleOrderCommissionRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := HandleOrderCommissionRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HandleOrderCommissionRequestMultiError(errors)
	}

	return nil
}

// HandleOrderCommissionRequestMultiError is an error wrapping multiple
// validation errors returned by HandleOrderCommissionRequest.ValidateAll() if
// the designated constraints aren't met.
type HandleOrderCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleOrderCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleOrderCommissionRequestMultiError) AllErrors() []error { return m }

// HandleOrderCommissionRequestValidationError is the validation error returned
// by HandleOrderCommissionRequest.Validate if the designated constraints
// aren't met.
type HandleOrderCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleOrderCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleOrderCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleOrderCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleOrderCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleOrderCommissionRequestValidationError) ErrorName() string {
	return "HandleOrderCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleOrderCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleOrderCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleOrderCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleOrderCommissionRequestValidationError{}

// Validate checks the field values on HandleOrderCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleOrderCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleOrderCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleOrderCommissionReplyMultiError, or nil if none found.
func (m *HandleOrderCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleOrderCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HandleOrderCommissionReplyMultiError(errors)
	}

	return nil
}

// HandleOrderCommissionReplyMultiError is an error wrapping multiple
// validation errors returned by HandleOrderCommissionReply.ValidateAll() if
// the designated constraints aren't met.
type HandleOrderCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleOrderCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleOrderCommissionReplyMultiError) AllErrors() []error { return m }

// HandleOrderCommissionReplyValidationError is the validation error returned
// by HandleOrderCommissionReply.Validate if the designated constraints aren't met.
type HandleOrderCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleOrderCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleOrderCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleOrderCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleOrderCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleOrderCommissionReplyValidationError) ErrorName() string {
	return "HandleOrderCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e HandleOrderCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleOrderCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleOrderCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleOrderCommissionReplyValidationError{}

// Validate checks the field values on GetUserCommissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCommissionRequestMultiError, or nil if none found.
func (m *GetUserCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserCommissionRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserCommissionRequestMultiError(errors)
	}

	return nil
}

// GetUserCommissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserCommissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCommissionRequestMultiError) AllErrors() []error { return m }

// GetUserCommissionRequestValidationError is the validation error returned by
// GetUserCommissionRequest.Validate if the designated constraints aren't met.
type GetUserCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCommissionRequestValidationError) ErrorName() string {
	return "GetUserCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCommissionRequestValidationError{}

// Validate checks the field values on GetUserCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCommissionReplyMultiError, or nil if none found.
func (m *GetUserCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for TotalCommission

	// no validation rules for TodayCommission

	// no validation rules for SettledCommission

	// no validation rules for TotalRegistrationCount

	// no validation rules for TodayRegistrationCount

	if len(errors) > 0 {
		return GetUserCommissionReplyMultiError(errors)
	}

	return nil
}

// GetUserCommissionReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserCommissionReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCommissionReplyMultiError) AllErrors() []error { return m }

// GetUserCommissionReplyValidationError is the validation error returned by
// GetUserCommissionReply.Validate if the designated constraints aren't met.
type GetUserCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCommissionReplyValidationError) ErrorName() string {
	return "GetUserCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCommissionReplyValidationError{}

// Validate checks the field values on ListCommissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionRequestMultiError, or nil if none found.
func (m *ListCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCommissionRequestMultiError(errors)
	}

	return nil
}

// ListCommissionRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommissionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionRequestMultiError) AllErrors() []error { return m }

// ListCommissionRequestValidationError is the validation error returned by
// ListCommissionRequest.Validate if the designated constraints aren't met.
type ListCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionRequestValidationError) ErrorName() string {
	return "ListCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionRequestValidationError{}

// Validate checks the field values on ListCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionReplyMultiError, or nil if none found.
func (m *ListCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommissionReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommissionReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommissionReplyValidationError{
					field:  fmt.Sprintf("Commissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommissionReplyMultiError(errors)
	}

	return nil
}

// ListCommissionReplyMultiError is an error wrapping multiple validation
// errors returned by ListCommissionReply.ValidateAll() if the designated
// constraints aren't met.
type ListCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionReplyMultiError) AllErrors() []error { return m }

// ListCommissionReplyValidationError is the validation error returned by
// ListCommissionReply.Validate if the designated constraints aren't met.
type ListCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionReplyValidationError) ErrorName() string {
	return "ListCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionReplyValidationError{}

// Validate checks the field values on ListCommissionByParentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionByParentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionByParentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionByParentReqMultiError, or nil if none found.
func (m *ListCommissionByParentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionByParentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := ListCommissionByParentReqValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommissionByParentReqMultiError(errors)
	}

	return nil
}

// ListCommissionByParentReqMultiError is an error wrapping multiple validation
// errors returned by ListCommissionByParentReq.ValidateAll() if the
// designated constraints aren't met.
type ListCommissionByParentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionByParentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionByParentReqMultiError) AllErrors() []error { return m }

// ListCommissionByParentReqValidationError is the validation error returned by
// ListCommissionByParentReq.Validate if the designated constraints aren't met.
type ListCommissionByParentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionByParentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionByParentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionByParentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionByParentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionByParentReqValidationError) ErrorName() string {
	return "ListCommissionByParentReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionByParentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionByParentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionByParentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionByParentReqValidationError{}

// Validate checks the field values on ListCommissionByParentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionByParentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionByParentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionByParentReplyMultiError, or nil if none found.
func (m *ListCommissionByParentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionByParentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommissionByParentReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommissionByParentReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommissionByParentReplyValidationError{
					field:  fmt.Sprintf("Commissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommissionByParentReplyMultiError(errors)
	}

	return nil
}

// ListCommissionByParentReplyMultiError is an error wrapping multiple
// validation errors returned by ListCommissionByParentReply.ValidateAll() if
// the designated constraints aren't met.
type ListCommissionByParentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionByParentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionByParentReplyMultiError) AllErrors() []error { return m }

// ListCommissionByParentReplyValidationError is the validation error returned
// by ListCommissionByParentReply.Validate if the designated constraints
// aren't met.
type ListCommissionByParentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionByParentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionByParentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionByParentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionByParentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionByParentReplyValidationError) ErrorName() string {
	return "ListCommissionByParentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionByParentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionByParentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionByParentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionByParentReplyValidationError{}
