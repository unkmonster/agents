// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/commission/service/v1/commission.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IncChainRegistrationCountByDirectUserReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IncChainRegistrationCountByDirectUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IncChainRegistrationCountByDirectUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IncChainRegistrationCountByDirectUserReqMultiError, or nil if none found.
func (m *IncChainRegistrationCountByDirectUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IncChainRegistrationCountByDirectUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := IncChainRegistrationCountByDirectUserReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncChainRegistrationCountByDirectUserReqMultiError(errors)
	}

	return nil
}

// IncChainRegistrationCountByDirectUserReqMultiError is an error wrapping
// multiple validation errors returned by
// IncChainRegistrationCountByDirectUserReq.ValidateAll() if the designated
// constraints aren't met.
type IncChainRegistrationCountByDirectUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncChainRegistrationCountByDirectUserReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncChainRegistrationCountByDirectUserReqMultiError) AllErrors() []error { return m }

// IncChainRegistrationCountByDirectUserReqValidationError is the validation
// error returned by IncChainRegistrationCountByDirectUserReq.Validate if the
// designated constraints aren't met.
type IncChainRegistrationCountByDirectUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncChainRegistrationCountByDirectUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncChainRegistrationCountByDirectUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncChainRegistrationCountByDirectUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncChainRegistrationCountByDirectUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncChainRegistrationCountByDirectUserReqValidationError) ErrorName() string {
	return "IncChainRegistrationCountByDirectUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e IncChainRegistrationCountByDirectUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncChainRegistrationCountByDirectUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncChainRegistrationCountByDirectUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncChainRegistrationCountByDirectUserReqValidationError{}

// Validate checks the field values on
// IncChainRegistrationCountByDirectUserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IncChainRegistrationCountByDirectUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IncChainRegistrationCountByDirectUserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IncChainRegistrationCountByDirectUserReplyMultiError, or nil if none found.
func (m *IncChainRegistrationCountByDirectUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IncChainRegistrationCountByDirectUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncChainRegistrationCountByDirectUserReplyMultiError(errors)
	}

	return nil
}

// IncChainRegistrationCountByDirectUserReplyMultiError is an error wrapping
// multiple validation errors returned by
// IncChainRegistrationCountByDirectUserReply.ValidateAll() if the designated
// constraints aren't met.
type IncChainRegistrationCountByDirectUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncChainRegistrationCountByDirectUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncChainRegistrationCountByDirectUserReplyMultiError) AllErrors() []error { return m }

// IncChainRegistrationCountByDirectUserReplyValidationError is the validation
// error returned by IncChainRegistrationCountByDirectUserReply.Validate if
// the designated constraints aren't met.
type IncChainRegistrationCountByDirectUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncChainRegistrationCountByDirectUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncChainRegistrationCountByDirectUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncChainRegistrationCountByDirectUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncChainRegistrationCountByDirectUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncChainRegistrationCountByDirectUserReplyValidationError) ErrorName() string {
	return "IncChainRegistrationCountByDirectUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IncChainRegistrationCountByDirectUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncChainRegistrationCountByDirectUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncChainRegistrationCountByDirectUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncChainRegistrationCountByDirectUserReplyValidationError{}

// Validate checks the field values on HandleOrderCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleOrderCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleOrderCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleOrderCommissionRequestMultiError, or nil if none found.
func (m *HandleOrderCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleOrderCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := HandleOrderCommissionRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := HandleOrderCommissionRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HandleOrderCommissionRequestMultiError(errors)
	}

	return nil
}

// HandleOrderCommissionRequestMultiError is an error wrapping multiple
// validation errors returned by HandleOrderCommissionRequest.ValidateAll() if
// the designated constraints aren't met.
type HandleOrderCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleOrderCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleOrderCommissionRequestMultiError) AllErrors() []error { return m }

// HandleOrderCommissionRequestValidationError is the validation error returned
// by HandleOrderCommissionRequest.Validate if the designated constraints
// aren't met.
type HandleOrderCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleOrderCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleOrderCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleOrderCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleOrderCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleOrderCommissionRequestValidationError) ErrorName() string {
	return "HandleOrderCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleOrderCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleOrderCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleOrderCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleOrderCommissionRequestValidationError{}

// Validate checks the field values on HandleOrderCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleOrderCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleOrderCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleOrderCommissionReplyMultiError, or nil if none found.
func (m *HandleOrderCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleOrderCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HandleOrderCommissionReplyMultiError(errors)
	}

	return nil
}

// HandleOrderCommissionReplyMultiError is an error wrapping multiple
// validation errors returned by HandleOrderCommissionReply.ValidateAll() if
// the designated constraints aren't met.
type HandleOrderCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleOrderCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleOrderCommissionReplyMultiError) AllErrors() []error { return m }

// HandleOrderCommissionReplyValidationError is the validation error returned
// by HandleOrderCommissionReply.Validate if the designated constraints aren't met.
type HandleOrderCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleOrderCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleOrderCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleOrderCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleOrderCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleOrderCommissionReplyValidationError) ErrorName() string {
	return "HandleOrderCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e HandleOrderCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleOrderCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleOrderCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleOrderCommissionReplyValidationError{}

// Validate checks the field values on GetUserTotalCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTotalCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTotalCommissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserTotalCommissionRequestMultiError, or nil if none found.
func (m *GetUserTotalCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTotalCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserTotalCommissionRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserTotalCommissionRequestMultiError(errors)
	}

	return nil
}

// GetUserTotalCommissionRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserTotalCommissionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserTotalCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTotalCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTotalCommissionRequestMultiError) AllErrors() []error { return m }

// GetUserTotalCommissionRequestValidationError is the validation error
// returned by GetUserTotalCommissionRequest.Validate if the designated
// constraints aren't met.
type GetUserTotalCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTotalCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTotalCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTotalCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTotalCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTotalCommissionRequestValidationError) ErrorName() string {
	return "GetUserTotalCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTotalCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTotalCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTotalCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTotalCommissionRequestValidationError{}

// Validate checks the field values on GetUserTotalCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTotalCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTotalCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTotalCommissionReplyMultiError, or nil if none found.
func (m *GetUserTotalCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTotalCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for TotalCommission

	// no validation rules for TodayCommission

	// no validation rules for SettledCommission

	// no validation rules for TotalRegistrationCount

	// no validation rules for TodayRegistrationCount

	if len(errors) > 0 {
		return GetUserTotalCommissionReplyMultiError(errors)
	}

	return nil
}

// GetUserTotalCommissionReplyMultiError is an error wrapping multiple
// validation errors returned by GetUserTotalCommissionReply.ValidateAll() if
// the designated constraints aren't met.
type GetUserTotalCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTotalCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTotalCommissionReplyMultiError) AllErrors() []error { return m }

// GetUserTotalCommissionReplyValidationError is the validation error returned
// by GetUserTotalCommissionReply.Validate if the designated constraints
// aren't met.
type GetUserTotalCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTotalCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTotalCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTotalCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTotalCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTotalCommissionReplyValidationError) ErrorName() string {
	return "GetUserTotalCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTotalCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTotalCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTotalCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTotalCommissionReplyValidationError{}

// Validate checks the field values on ListTotalCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTotalCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTotalCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTotalCommissionRequestMultiError, or nil if none found.
func (m *ListTotalCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTotalCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTotalCommissionRequestMultiError(errors)
	}

	return nil
}

// ListTotalCommissionRequestMultiError is an error wrapping multiple
// validation errors returned by ListTotalCommissionRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTotalCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTotalCommissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTotalCommissionRequestMultiError) AllErrors() []error { return m }

// ListTotalCommissionRequestValidationError is the validation error returned
// by ListTotalCommissionRequest.Validate if the designated constraints aren't met.
type ListTotalCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTotalCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTotalCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTotalCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTotalCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTotalCommissionRequestValidationError) ErrorName() string {
	return "ListTotalCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTotalCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTotalCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTotalCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTotalCommissionRequestValidationError{}

// Validate checks the field values on ListTotalCommissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTotalCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTotalCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTotalCommissionReplyMultiError, or nil if none found.
func (m *ListTotalCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTotalCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTotalCommissionReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTotalCommissionReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTotalCommissionReplyValidationError{
					field:  fmt.Sprintf("Commissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTotalCommissionReplyMultiError(errors)
	}

	return nil
}

// ListTotalCommissionReplyMultiError is an error wrapping multiple validation
// errors returned by ListTotalCommissionReply.ValidateAll() if the designated
// constraints aren't met.
type ListTotalCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTotalCommissionReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTotalCommissionReplyMultiError) AllErrors() []error { return m }

// ListTotalCommissionReplyValidationError is the validation error returned by
// ListTotalCommissionReply.Validate if the designated constraints aren't met.
type ListTotalCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTotalCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTotalCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTotalCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTotalCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTotalCommissionReplyValidationError) ErrorName() string {
	return "ListTotalCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTotalCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTotalCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTotalCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTotalCommissionReplyValidationError{}

// Validate checks the field values on ListTotalCommissionByParentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTotalCommissionByParentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTotalCommissionByParentReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTotalCommissionByParentReqMultiError, or nil if none found.
func (m *ListTotalCommissionByParentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTotalCommissionByParentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := ListTotalCommissionByParentReqValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTotalCommissionByParentReqMultiError(errors)
	}

	return nil
}

// ListTotalCommissionByParentReqMultiError is an error wrapping multiple
// validation errors returned by ListTotalCommissionByParentReq.ValidateAll()
// if the designated constraints aren't met.
type ListTotalCommissionByParentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTotalCommissionByParentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTotalCommissionByParentReqMultiError) AllErrors() []error { return m }

// ListTotalCommissionByParentReqValidationError is the validation error
// returned by ListTotalCommissionByParentReq.Validate if the designated
// constraints aren't met.
type ListTotalCommissionByParentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTotalCommissionByParentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTotalCommissionByParentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTotalCommissionByParentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTotalCommissionByParentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTotalCommissionByParentReqValidationError) ErrorName() string {
	return "ListTotalCommissionByParentReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTotalCommissionByParentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTotalCommissionByParentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTotalCommissionByParentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTotalCommissionByParentReqValidationError{}

// Validate checks the field values on ListTotalCommissionByParentReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTotalCommissionByParentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTotalCommissionByParentReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTotalCommissionByParentReplyMultiError, or nil if none found.
func (m *ListTotalCommissionByParentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTotalCommissionByParentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTotalCommissionByParentReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTotalCommissionByParentReplyValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTotalCommissionByParentReplyValidationError{
					field:  fmt.Sprintf("Commissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTotalCommissionByParentReplyMultiError(errors)
	}

	return nil
}

// ListTotalCommissionByParentReplyMultiError is an error wrapping multiple
// validation errors returned by
// ListTotalCommissionByParentReply.ValidateAll() if the designated
// constraints aren't met.
type ListTotalCommissionByParentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTotalCommissionByParentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTotalCommissionByParentReplyMultiError) AllErrors() []error { return m }

// ListTotalCommissionByParentReplyValidationError is the validation error
// returned by ListTotalCommissionByParentReply.Validate if the designated
// constraints aren't met.
type ListTotalCommissionByParentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTotalCommissionByParentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTotalCommissionByParentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTotalCommissionByParentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTotalCommissionByParentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTotalCommissionByParentReplyValidationError) ErrorName() string {
	return "ListTotalCommissionByParentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTotalCommissionByParentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTotalCommissionByParentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTotalCommissionByParentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTotalCommissionByParentReplyValidationError{}
