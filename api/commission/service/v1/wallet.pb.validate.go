// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/commission/service/v1/wallet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _wallet_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletRequestMultiError, or nil if none found.
func (m *CreateWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateWalletRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWalletRequest_WalletType_InLookup[m.GetWalletType()]; !ok {
		err := CreateWalletRequestValidationError{
			field:  "WalletType",
			reason: "value must be in list [alipay wxpay tron]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.QrCode != nil {
		// no validation rules for QrCode
	}

	if len(errors) > 0 {
		return CreateWalletRequestMultiError(errors)
	}

	return nil
}

func (m *CreateWalletRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateWalletRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletRequestMultiError) AllErrors() []error { return m }

// CreateWalletRequestValidationError is the validation error returned by
// CreateWalletRequest.Validate if the designated constraints aren't met.
type CreateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletRequestValidationError) ErrorName() string {
	return "CreateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletRequestValidationError{}

var _CreateWalletRequest_WalletType_InLookup = map[string]struct{}{
	"alipay": {},
	"wxpay":  {},
	"tron":   {},
}

// Validate checks the field values on CreateWalletReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletReplyMultiError, or nil if none found.
func (m *CreateWalletReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for WalletType

	// no validation rules for Id

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.QrCode != nil {
		// no validation rules for QrCode
	}

	if len(errors) > 0 {
		return CreateWalletReplyMultiError(errors)
	}

	return nil
}

// CreateWalletReplyMultiError is an error wrapping multiple validation errors
// returned by CreateWalletReply.ValidateAll() if the designated constraints
// aren't met.
type CreateWalletReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletReplyMultiError) AllErrors() []error { return m }

// CreateWalletReplyValidationError is the validation error returned by
// CreateWalletReply.Validate if the designated constraints aren't met.
type CreateWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletReplyValidationError) ErrorName() string {
	return "CreateWalletReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletReplyValidationError{}

// Validate checks the field values on UpdateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletRequestMultiError, or nil if none found.
func (m *UpdateWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateWalletRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.QrCode != nil {
		// no validation rules for QrCode
	}

	if len(errors) > 0 {
		return UpdateWalletRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateWalletRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateWalletRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletRequestMultiError) AllErrors() []error { return m }

// UpdateWalletRequestValidationError is the validation error returned by
// UpdateWalletRequest.Validate if the designated constraints aren't met.
type UpdateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletRequestValidationError) ErrorName() string {
	return "UpdateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletRequestValidationError{}

// Validate checks the field values on UpdateWalletReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletReplyMultiError, or nil if none found.
func (m *UpdateWalletReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for WalletType

	// no validation rules for Id

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.QrCode != nil {
		// no validation rules for QrCode
	}

	if len(errors) > 0 {
		return UpdateWalletReplyMultiError(errors)
	}

	return nil
}

// UpdateWalletReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateWalletReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateWalletReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletReplyMultiError) AllErrors() []error { return m }

// UpdateWalletReplyValidationError is the validation error returned by
// UpdateWalletReply.Validate if the designated constraints aren't met.
type UpdateWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletReplyValidationError) ErrorName() string {
	return "UpdateWalletReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletReplyValidationError{}

// Validate checks the field values on DeleteWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWalletRequestMultiError, or nil if none found.
func (m *DeleteWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteWalletRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWalletRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteWalletRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteWalletRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWalletRequestMultiError) AllErrors() []error { return m }

// DeleteWalletRequestValidationError is the validation error returned by
// DeleteWalletRequest.Validate if the designated constraints aren't met.
type DeleteWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWalletRequestValidationError) ErrorName() string {
	return "DeleteWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWalletRequestValidationError{}

// Validate checks the field values on DeleteWalletReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteWalletReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWalletReplyMultiError, or nil if none found.
func (m *DeleteWalletReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWalletReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWalletReplyMultiError(errors)
	}

	return nil
}

// DeleteWalletReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteWalletReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteWalletReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWalletReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWalletReplyMultiError) AllErrors() []error { return m }

// DeleteWalletReplyValidationError is the validation error returned by
// DeleteWalletReply.Validate if the designated constraints aren't met.
type DeleteWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWalletReplyValidationError) ErrorName() string {
	return "DeleteWalletReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWalletReplyValidationError{}

// Validate checks the field values on GetWalletRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletRequestMultiError, or nil if none found.
func (m *GetWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetWalletRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWalletRequestMultiError(errors)
	}

	return nil
}

func (m *GetWalletRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetWalletRequestMultiError is an error wrapping multiple validation errors
// returned by GetWalletRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletRequestMultiError) AllErrors() []error { return m }

// GetWalletRequestValidationError is the validation error returned by
// GetWalletRequest.Validate if the designated constraints aren't met.
type GetWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletRequestValidationError) ErrorName() string { return "GetWalletRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletRequestValidationError{}

// Validate checks the field values on GetWalletReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWalletReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWalletReplyMultiError,
// or nil if none found.
func (m *GetWalletReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for WalletType

	// no validation rules for Id

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.QrCode != nil {
		// no validation rules for QrCode
	}

	if len(errors) > 0 {
		return GetWalletReplyMultiError(errors)
	}

	return nil
}

// GetWalletReplyMultiError is an error wrapping multiple validation errors
// returned by GetWalletReply.ValidateAll() if the designated constraints
// aren't met.
type GetWalletReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletReplyMultiError) AllErrors() []error { return m }

// GetWalletReplyValidationError is the validation error returned by
// GetWalletReply.Validate if the designated constraints aren't met.
type GetWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletReplyValidationError) ErrorName() string { return "GetWalletReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletReplyValidationError{}

// Validate checks the field values on ListWalletRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletRequestMultiError, or nil if none found.
func (m *ListWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListWalletRequestMultiError(errors)
	}

	return nil
}

// ListWalletRequestMultiError is an error wrapping multiple validation errors
// returned by ListWalletRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletRequestMultiError) AllErrors() []error { return m }

// ListWalletRequestValidationError is the validation error returned by
// ListWalletRequest.Validate if the designated constraints aren't met.
type ListWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletRequestValidationError) ErrorName() string {
	return "ListWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletRequestValidationError{}

// Validate checks the field values on ListWalletReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWalletReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletReplyMultiError, or nil if none found.
func (m *ListWalletReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletReplyValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletReplyValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletReplyValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWalletReplyMultiError(errors)
	}

	return nil
}

// ListWalletReplyMultiError is an error wrapping multiple validation errors
// returned by ListWalletReply.ValidateAll() if the designated constraints
// aren't met.
type ListWalletReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletReplyMultiError) AllErrors() []error { return m }

// ListWalletReplyValidationError is the validation error returned by
// ListWalletReply.Validate if the designated constraints aren't met.
type ListWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletReplyValidationError) ErrorName() string { return "ListWalletReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletReplyValidationError{}

// Validate checks the field values on ListWalletByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletByUserRequestMultiError, or nil if none found.
func (m *ListWalletByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListWalletByUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWalletByUserRequestMultiError(errors)
	}

	return nil
}

func (m *ListWalletByUserRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListWalletByUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListWalletByUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWalletByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletByUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletByUserRequestMultiError) AllErrors() []error { return m }

// ListWalletByUserRequestValidationError is the validation error returned by
// ListWalletByUserRequest.Validate if the designated constraints aren't met.
type ListWalletByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletByUserRequestValidationError) ErrorName() string {
	return "ListWalletByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletByUserRequestValidationError{}
