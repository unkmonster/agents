// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--dev
// source: api/commission/service/v1/commission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommissionGetUserTotalCommission = "/api.commission.service.v1.Commission/GetUserTotalCommission"
const OperationCommissionListCommissionByUser = "/api.commission.service.v1.Commission/ListCommissionByUser"
const OperationCommissionListTotalCommission = "/api.commission.service.v1.Commission/ListTotalCommission"
const OperationCommissionListTotalCommissionByParent = "/api.commission.service.v1.Commission/ListTotalCommissionByParent"

type CommissionHTTPServer interface {
	// GetUserTotalCommission 获取指定用户的累计佣金
	GetUserTotalCommission(context.Context, *GetUserTotalCommissionRequest) (*GetUserTotalCommissionReply, error)
	ListCommissionByUser(context.Context, *ListCommissionByUserReq) (*ListCommissionByUserReply, error)
	// ListTotalCommission 列出每个用户的累计佣金
	ListTotalCommission(context.Context, *ListTotalCommissionRequest) (*ListTotalCommissionReply, error)
	// ListTotalCommissionByParent 列出每个下游代理的累计佣金
	ListTotalCommissionByParent(context.Context, *ListTotalCommissionByParentReq) (*ListTotalCommissionByParentReply, error)
}

func RegisterCommissionHTTPServer(s *http.Server, srv CommissionHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/users/{user_id}/total_commission", _Commission_GetUserTotalCommission0_HTTP_Handler(srv))
	r.GET("/v1/total_commissions", _Commission_ListTotalCommission0_HTTP_Handler(srv))
	r.GET("/v1/users/{parent_id}/children/total_commissions", _Commission_ListTotalCommissionByParent0_HTTP_Handler(srv))
	r.GET("/v1/users/{user_id}/commissions", _Commission_ListCommissionByUser0_HTTP_Handler(srv))
}

func _Commission_GetUserTotalCommission0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTotalCommissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionGetUserTotalCommission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTotalCommission(ctx, req.(*GetUserTotalCommissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserTotalCommissionReply)
		return ctx.Result(200, reply)
	}
}

func _Commission_ListTotalCommission0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTotalCommissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionListTotalCommission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTotalCommission(ctx, req.(*ListTotalCommissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTotalCommissionReply)
		return ctx.Result(200, reply)
	}
}

func _Commission_ListTotalCommissionByParent0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTotalCommissionByParentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionListTotalCommissionByParent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTotalCommissionByParent(ctx, req.(*ListTotalCommissionByParentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTotalCommissionByParentReply)
		return ctx.Result(200, reply)
	}
}

func _Commission_ListCommissionByUser0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommissionByUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionListCommissionByUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommissionByUser(ctx, req.(*ListCommissionByUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommissionByUserReply)
		return ctx.Result(200, reply)
	}
}

type CommissionHTTPClient interface {
	GetUserTotalCommission(ctx context.Context, req *GetUserTotalCommissionRequest, opts ...http.CallOption) (rsp *GetUserTotalCommissionReply, err error)
	ListCommissionByUser(ctx context.Context, req *ListCommissionByUserReq, opts ...http.CallOption) (rsp *ListCommissionByUserReply, err error)
	ListTotalCommission(ctx context.Context, req *ListTotalCommissionRequest, opts ...http.CallOption) (rsp *ListTotalCommissionReply, err error)
	ListTotalCommissionByParent(ctx context.Context, req *ListTotalCommissionByParentReq, opts ...http.CallOption) (rsp *ListTotalCommissionByParentReply, err error)
}

type CommissionHTTPClientImpl struct {
	cc *http.Client
}

func NewCommissionHTTPClient(client *http.Client) CommissionHTTPClient {
	return &CommissionHTTPClientImpl{client}
}

func (c *CommissionHTTPClientImpl) GetUserTotalCommission(ctx context.Context, in *GetUserTotalCommissionRequest, opts ...http.CallOption) (*GetUserTotalCommissionReply, error) {
	var out GetUserTotalCommissionReply
	pattern := "/v1/users/{user_id}/total_commission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionGetUserTotalCommission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommissionHTTPClientImpl) ListCommissionByUser(ctx context.Context, in *ListCommissionByUserReq, opts ...http.CallOption) (*ListCommissionByUserReply, error) {
	var out ListCommissionByUserReply
	pattern := "/v1/users/{user_id}/commissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionListCommissionByUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommissionHTTPClientImpl) ListTotalCommission(ctx context.Context, in *ListTotalCommissionRequest, opts ...http.CallOption) (*ListTotalCommissionReply, error) {
	var out ListTotalCommissionReply
	pattern := "/v1/total_commissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionListTotalCommission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommissionHTTPClientImpl) ListTotalCommissionByParent(ctx context.Context, in *ListTotalCommissionByParentReq, opts ...http.CallOption) (*ListTotalCommissionByParentReply, error) {
	var out ListTotalCommissionByParentReply
	pattern := "/v1/users/{parent_id}/children/total_commissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionListTotalCommissionByParent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
