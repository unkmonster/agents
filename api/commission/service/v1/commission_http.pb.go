// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--dev
// source: commission/service/v1/commission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommissionGetUserCommission = "/api.commission.service.v1.Commission/GetUserCommission"
const OperationCommissionListCommission = "/api.commission.service.v1.Commission/ListCommission"
const OperationCommissionListCommissionByParent = "/api.commission.service.v1.Commission/ListCommissionByParent"

type CommissionHTTPServer interface {
	GetUserCommission(context.Context, *GetUserCommissionRequest) (*GetUserCommissionReply, error)
	ListCommission(context.Context, *ListCommissionRequest) (*ListCommissionReply, error)
	ListCommissionByParent(context.Context, *ListCommissionByParentReq) (*ListCommissionByParentReply, error)
}

func RegisterCommissionHTTPServer(s *http.Server, srv CommissionHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/users/{user_id}/commission", _Commission_GetUserCommission0_HTTP_Handler(srv))
	r.GET("/v1/commissions", _Commission_ListCommission0_HTTP_Handler(srv))
	r.GET("/v1/users/{parent_id}/users/commissions", _Commission_ListCommissionByParent0_HTTP_Handler(srv))
}

func _Commission_GetUserCommission0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserCommissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionGetUserCommission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserCommission(ctx, req.(*GetUserCommissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserCommissionReply)
		return ctx.Result(200, reply)
	}
}

func _Commission_ListCommission0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionListCommission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommission(ctx, req.(*ListCommissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommissionReply)
		return ctx.Result(200, reply)
	}
}

func _Commission_ListCommissionByParent0_HTTP_Handler(srv CommissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommissionByParentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommissionListCommissionByParent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommissionByParent(ctx, req.(*ListCommissionByParentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommissionByParentReply)
		return ctx.Result(200, reply)
	}
}

type CommissionHTTPClient interface {
	GetUserCommission(ctx context.Context, req *GetUserCommissionRequest, opts ...http.CallOption) (rsp *GetUserCommissionReply, err error)
	ListCommission(ctx context.Context, req *ListCommissionRequest, opts ...http.CallOption) (rsp *ListCommissionReply, err error)
	ListCommissionByParent(ctx context.Context, req *ListCommissionByParentReq, opts ...http.CallOption) (rsp *ListCommissionByParentReply, err error)
}

type CommissionHTTPClientImpl struct {
	cc *http.Client
}

func NewCommissionHTTPClient(client *http.Client) CommissionHTTPClient {
	return &CommissionHTTPClientImpl{client}
}

func (c *CommissionHTTPClientImpl) GetUserCommission(ctx context.Context, in *GetUserCommissionRequest, opts ...http.CallOption) (*GetUserCommissionReply, error) {
	var out GetUserCommissionReply
	pattern := "/v1/users/{user_id}/commission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionGetUserCommission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommissionHTTPClientImpl) ListCommission(ctx context.Context, in *ListCommissionRequest, opts ...http.CallOption) (*ListCommissionReply, error) {
	var out ListCommissionReply
	pattern := "/v1/commissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionListCommission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommissionHTTPClientImpl) ListCommissionByParent(ctx context.Context, in *ListCommissionByParentReq, opts ...http.CallOption) (*ListCommissionByParentReply, error) {
	var out ListCommissionByParentReply
	pattern := "/v1/users/{parent_id}/users/commissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommissionListCommissionByParent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
