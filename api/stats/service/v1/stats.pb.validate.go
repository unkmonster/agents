// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/stats/service/v1/stats.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterEventMultiError, or
// nil if none found.
func (m *RegisterEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := RegisterEventValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RegisterEventValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterEventMultiError(errors)
	}

	return nil
}

// RegisterEventMultiError is an error wrapping multiple validation errors
// returned by RegisterEvent.ValidateAll() if the designated constraints
// aren't met.
type RegisterEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventMultiError) AllErrors() []error { return m }

// RegisterEventValidationError is the validation error returned by
// RegisterEvent.Validate if the designated constraints aren't met.
type RegisterEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventValidationError) ErrorName() string { return "RegisterEventValidationError" }

// Error satisfies the builtin error interface
func (e RegisterEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventValidationError{}

// Validate checks the field values on RechargeEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RechargeEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RechargeEventMultiError, or
// nil if none found.
func (m *RechargeEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := RechargeEventValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RechargeEventValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 1 {
		err := RechargeEventValidationError{
			field:  "Amount",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProduct()) < 1 {
		err := RechargeEventValidationError{
			field:  "Product",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RechargeEventMultiError(errors)
	}

	return nil
}

// RechargeEventMultiError is an error wrapping multiple validation errors
// returned by RechargeEvent.ValidateAll() if the designated constraints
// aren't met.
type RechargeEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeEventMultiError) AllErrors() []error { return m }

// RechargeEventValidationError is the validation error returned by
// RechargeEvent.Validate if the designated constraints aren't met.
type RechargeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeEventValidationError) ErrorName() string { return "RechargeEventValidationError" }

// Error satisfies the builtin error interface
func (e RechargeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeEventValidationError{}

// Validate checks the field values on CreateEventReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateEventReqMultiError,
// or nil if none found.
func (m *CreateEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateEventReqValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Data.(type) {
	case *CreateEventReq_Register:
		if v == nil {
			err := CreateEventReqValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegister()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventReqValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventReqValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegister()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventReqValidationError{
					field:  "Register",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateEventReq_Recharge:
		if v == nil {
			err := CreateEventReqValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRecharge()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventReqValidationError{
						field:  "Recharge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventReqValidationError{
						field:  "Recharge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRecharge()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventReqValidationError{
					field:  "Recharge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateEventReqMultiError(errors)
	}

	return nil
}

// CreateEventReqMultiError is an error wrapping multiple validation errors
// returned by CreateEventReq.ValidateAll() if the designated constraints
// aren't met.
type CreateEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventReqMultiError) AllErrors() []error { return m }

// CreateEventReqValidationError is the validation error returned by
// CreateEventReq.Validate if the designated constraints aren't met.
type CreateEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventReqValidationError) ErrorName() string { return "CreateEventReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventReqValidationError{}

// Validate checks the field values on CreateEventReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateEventReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventReplyMultiError, or nil if none found.
func (m *CreateEventReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEventReplyMultiError(errors)
	}

	return nil
}

// CreateEventReplyMultiError is an error wrapping multiple validation errors
// returned by CreateEventReply.ValidateAll() if the designated constraints
// aren't met.
type CreateEventReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventReplyMultiError) AllErrors() []error { return m }

// CreateEventReplyValidationError is the validation error returned by
// CreateEventReply.Validate if the designated constraints aren't met.
type CreateEventReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventReplyValidationError) ErrorName() string { return "CreateEventReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateEventReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventReplyValidationError{}
