// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--dev
// source: api/authn/service/v1/authn.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthnLogin = "/api.authn.service.v1.Authn/Login"
const OperationAuthnRegister = "/api.authn.service.v1.Authn/Register"
const OperationAuthnVerify = "/api.authn.service.v1.Authn/Verify"

type AuthnHTTPServer interface {
	Login(context.Context, *LoginRequest) (*AuthReply, error)
	Register(context.Context, *RegisterRequest) (*AuthReply, error)
	Verify(context.Context, *VerifyRequest) (*VerifyReply, error)
}

func RegisterAuthnHTTPServer(s *http.Server, srv AuthnHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/login", _Authn_Login0_HTTP_Handler(srv))
	r.POST("/v1/auth/register", _Authn_Register0_HTTP_Handler(srv))
	r.POST("/v1/auth/verify", _Authn_Verify0_HTTP_Handler(srv))
}

func _Authn_Login0_HTTP_Handler(srv AuthnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthnLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

func _Authn_Register0_HTTP_Handler(srv AuthnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthnRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

func _Authn_Verify0_HTTP_Handler(srv AuthnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthnVerify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Verify(ctx, req.(*VerifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyReply)
		return ctx.Result(200, reply)
	}
}

type AuthnHTTPClient interface {
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *AuthReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *AuthReply, err error)
	Verify(ctx context.Context, req *VerifyRequest, opts ...http.CallOption) (rsp *VerifyReply, err error)
}

type AuthnHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthnHTTPClient(client *http.Client) AuthnHTTPClient {
	return &AuthnHTTPClientImpl{client}
}

func (c *AuthnHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/v1/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthnLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthnHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/v1/auth/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthnRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthnHTTPClientImpl) Verify(ctx context.Context, in *VerifyRequest, opts ...http.CallOption) (*VerifyReply, error) {
	var out VerifyReply
	pattern := "/v1/auth/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthnVerify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
