// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByDomainRequestMultiError, or nil if none found.
func (m *GetUserByDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := GetUserByDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserByDomainRequestMultiError(errors)
	}

	return nil
}

// GetUserByDomainRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByDomainRequestMultiError) AllErrors() []error { return m }

// GetUserByDomainRequestValidationError is the validation error returned by
// GetUserByDomainRequest.Validate if the designated constraints aren't met.
type GetUserByDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByDomainRequestValidationError) ErrorName() string {
	return "GetUserByDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByDomainRequestValidationError{}

// Validate checks the field values on GetUserByDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByDomainReplyMultiError, or nil if none found.
func (m *GetUserByDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for ParentId

	// no validation rules for Level

	if len(errors) > 0 {
		return GetUserByDomainReplyMultiError(errors)
	}

	return nil
}

// GetUserByDomainReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserByDomainReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserByDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByDomainReplyMultiError) AllErrors() []error { return m }

// GetUserByDomainReplyValidationError is the validation error returned by
// GetUserByDomainReply.Validate if the designated constraints aren't met.
type GetUserByDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByDomainReplyValidationError) ErrorName() string {
	return "GetUserByDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByDomainReplyValidationError{}

// Validate checks the field values on GetUserByUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameRequestMultiError, or nil if none found.
func (m *GetUserByUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return GetUserByUsernameRequestMultiError(errors)
	}

	return nil
}

// GetUserByUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameRequestMultiError) AllErrors() []error { return m }

// GetUserByUsernameRequestValidationError is the validation error returned by
// GetUserByUsernameRequest.Validate if the designated constraints aren't met.
type GetUserByUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameRequestValidationError) ErrorName() string {
	return "GetUserByUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameRequestValidationError{}

// Validate checks the field values on DeleteDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRequestMultiError, or nil if none found.
func (m *DeleteDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return DeleteDomainRequestMultiError(errors)
	}

	return nil
}

// DeleteDomainRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRequestMultiError) AllErrors() []error { return m }

// DeleteDomainRequestValidationError is the validation error returned by
// DeleteDomainRequest.Validate if the designated constraints aren't met.
type DeleteDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRequestValidationError) ErrorName() string {
	return "DeleteDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRequestValidationError{}

// Validate checks the field values on DeleteDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainReplyMultiError, or nil if none found.
func (m *DeleteDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDomainReplyMultiError(errors)
	}

	return nil
}

// DeleteDomainReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDomainReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainReplyMultiError) AllErrors() []error { return m }

// DeleteDomainReplyValidationError is the validation error returned by
// DeleteDomainReply.Validate if the designated constraints aren't met.
type DeleteDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainReplyValidationError) ErrorName() string {
	return "DeleteDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainReplyValidationError{}

// Validate checks the field values on ListUserDomainsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDomainsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserDomainsByUserIdRequestMultiError, or nil if none found.
func (m *ListUserDomainsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return ListUserDomainsByUserIdRequestMultiError(errors)
	}

	return nil
}

// ListUserDomainsByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserDomainsByUserIdRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUserDomainsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsByUserIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsByUserIdRequestMultiError) AllErrors() []error { return m }

// ListUserDomainsByUserIdRequestValidationError is the validation error
// returned by ListUserDomainsByUserIdRequest.Validate if the designated
// constraints aren't met.
type ListUserDomainsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsByUserIdRequestValidationError) ErrorName() string {
	return "ListUserDomainsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsByUserIdRequestValidationError{}

// Validate checks the field values on ListUserDomainsByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDomainsByUserIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDomainsByUserIdReplyMultiError, or nil if none found.
func (m *ListUserDomainsByUserIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsByUserIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDomainsByUserIdReplyValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDomainsByUserIdReplyValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDomainsByUserIdReplyValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserDomainsByUserIdReplyMultiError(errors)
	}

	return nil
}

// ListUserDomainsByUserIdReplyMultiError is an error wrapping multiple
// validation errors returned by ListUserDomainsByUserIdReply.ValidateAll() if
// the designated constraints aren't met.
type ListUserDomainsByUserIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsByUserIdReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsByUserIdReplyMultiError) AllErrors() []error { return m }

// ListUserDomainsByUserIdReplyValidationError is the validation error returned
// by ListUserDomainsByUserIdReply.Validate if the designated constraints
// aren't met.
type ListUserDomainsByUserIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsByUserIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsByUserIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsByUserIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsByUserIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsByUserIdReplyValidationError) ErrorName() string {
	return "ListUserDomainsByUserIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsByUserIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsByUserIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsByUserIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsByUserIdReplyValidationError{}

// Validate checks the field values on ListUserDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDomainsRequestMultiError, or nil if none found.
func (m *ListUserDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserDomainsRequestMultiError(errors)
	}

	return nil
}

// ListUserDomainsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsRequestMultiError) AllErrors() []error { return m }

// ListUserDomainsRequestValidationError is the validation error returned by
// ListUserDomainsRequest.Validate if the designated constraints aren't met.
type ListUserDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsRequestValidationError) ErrorName() string {
	return "ListUserDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsRequestValidationError{}

// Validate checks the field values on ListUserDomainsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDomainsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDomainsReplyMultiError, or nil if none found.
func (m *ListUserDomainsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDomainsReplyValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDomainsReplyValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDomainsReplyValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserDomainsReplyMultiError(errors)
	}

	return nil
}

// ListUserDomainsReplyMultiError is an error wrapping multiple validation
// errors returned by ListUserDomainsReply.ValidateAll() if the designated
// constraints aren't met.
type ListUserDomainsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsReplyMultiError) AllErrors() []error { return m }

// ListUserDomainsReplyValidationError is the validation error returned by
// ListUserDomainsReply.Validate if the designated constraints aren't met.
type ListUserDomainsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsReplyValidationError) ErrorName() string {
	return "ListUserDomainsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsReplyValidationError{}

// Validate checks the field values on GetUserDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDomainRequestMultiError, or nil if none found.
func (m *GetUserDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return GetUserDomainRequestMultiError(errors)
	}

	return nil
}

// GetUserDomainRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDomainRequestMultiError) AllErrors() []error { return m }

// GetUserDomainRequestValidationError is the validation error returned by
// GetUserDomainRequest.Validate if the designated constraints aren't met.
type GetUserDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDomainRequestValidationError) ErrorName() string {
	return "GetUserDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDomainRequestValidationError{}

// Validate checks the field values on GetUserDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDomainReplyMultiError, or nil if none found.
func (m *GetUserDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Domain != nil {
		// no validation rules for Domain
	}

	if len(errors) > 0 {
		return GetUserDomainReplyMultiError(errors)
	}

	return nil
}

// GetUserDomainReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserDomainReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDomainReplyMultiError) AllErrors() []error { return m }

// GetUserDomainReplyValidationError is the validation error returned by
// GetUserDomainReply.Validate if the designated constraints aren't met.
type GetUserDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDomainReplyValidationError) ErrorName() string {
	return "GetUserDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDomainReplyValidationError{}

// Validate checks the field values on CreateUserDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserDomainRequestMultiError, or nil if none found.
func (m *CreateUserDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Domain != nil {
		// no validation rules for Domain
	}

	if len(errors) > 0 {
		return CreateUserDomainRequestMultiError(errors)
	}

	return nil
}

// CreateUserDomainRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDomainRequestMultiError) AllErrors() []error { return m }

// CreateUserDomainRequestValidationError is the validation error returned by
// CreateUserDomainRequest.Validate if the designated constraints aren't met.
type CreateUserDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDomainRequestValidationError) ErrorName() string {
	return "CreateUserDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDomainRequestValidationError{}

// Validate checks the field values on CreateUserDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserDomainReplyMultiError, or nil if none found.
func (m *CreateUserDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Domain != nil {
		// no validation rules for Domain
	}

	if len(errors) > 0 {
		return CreateUserDomainReplyMultiError(errors)
	}

	return nil
}

// CreateUserDomainReplyMultiError is an error wrapping multiple validation
// errors returned by CreateUserDomainReply.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDomainReplyMultiError) AllErrors() []error { return m }

// CreateUserDomainReplyValidationError is the validation error returned by
// CreateUserDomainReply.Validate if the designated constraints aren't met.
type CreateUserDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDomainReplyValidationError) ErrorName() string {
	return "CreateUserDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDomainReplyValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Password != nil {

		if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 20 {
			err := UpdateUserRequestValidationError{
				field:  "Password",
				reason: "value length must be between 8 and 20 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Nickname != nil {

		if utf8.RuneCountInString(m.GetNickname()) > 20 {
			err := UpdateUserRequestValidationError{
				field:  "Nickname",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on ListUserDomainsByUserIdReply_Domain with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserDomainsByUserIdReply_Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsByUserIdReply_Domain
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUserDomainsByUserIdReply_DomainMultiError, or nil if none found.
func (m *ListUserDomainsByUserIdReply_Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsByUserIdReply_Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Domain != nil {
		// no validation rules for Domain
	}

	if len(errors) > 0 {
		return ListUserDomainsByUserIdReply_DomainMultiError(errors)
	}

	return nil
}

// ListUserDomainsByUserIdReply_DomainMultiError is an error wrapping multiple
// validation errors returned by
// ListUserDomainsByUserIdReply_Domain.ValidateAll() if the designated
// constraints aren't met.
type ListUserDomainsByUserIdReply_DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsByUserIdReply_DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsByUserIdReply_DomainMultiError) AllErrors() []error { return m }

// ListUserDomainsByUserIdReply_DomainValidationError is the validation error
// returned by ListUserDomainsByUserIdReply_Domain.Validate if the designated
// constraints aren't met.
type ListUserDomainsByUserIdReply_DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsByUserIdReply_DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsByUserIdReply_DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsByUserIdReply_DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsByUserIdReply_DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsByUserIdReply_DomainValidationError) ErrorName() string {
	return "ListUserDomainsByUserIdReply_DomainValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsByUserIdReply_DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsByUserIdReply_Domain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsByUserIdReply_DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsByUserIdReply_DomainValidationError{}

// Validate checks the field values on ListUserDomainsReply_Domain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDomainsReply_Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDomainsReply_Domain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDomainsReply_DomainMultiError, or nil if none found.
func (m *ListUserDomainsReply_Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDomainsReply_Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Domain != nil {
		// no validation rules for Domain
	}

	if len(errors) > 0 {
		return ListUserDomainsReply_DomainMultiError(errors)
	}

	return nil
}

// ListUserDomainsReply_DomainMultiError is an error wrapping multiple
// validation errors returned by ListUserDomainsReply_Domain.ValidateAll() if
// the designated constraints aren't met.
type ListUserDomainsReply_DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDomainsReply_DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDomainsReply_DomainMultiError) AllErrors() []error { return m }

// ListUserDomainsReply_DomainValidationError is the validation error returned
// by ListUserDomainsReply_Domain.Validate if the designated constraints
// aren't met.
type ListUserDomainsReply_DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDomainsReply_DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDomainsReply_DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDomainsReply_DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDomainsReply_DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDomainsReply_DomainValidationError) ErrorName() string {
	return "ListUserDomainsReply_DomainValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDomainsReply_DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDomainsReply_Domain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDomainsReply_DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDomainsReply_DomainValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_UserMultiError, or nil if none found.
func (m *ListUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if len(errors) > 0 {
		return ListUserReply_UserMultiError(errors)
	}

	return nil
}

// ListUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_UserMultiError) AllErrors() []error { return m }

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}
