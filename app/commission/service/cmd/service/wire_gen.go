// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"agents/app/commission/service/internal/biz"
	"agents/app/commission/service/internal/conf"
	"agents/app/commission/service/internal/data"
	"agents/app/commission/service/internal/server"
	"agents/app/commission/service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger, registry *conf.Registry, auth *conf.Auth) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(discovery, logger)
	dataData, cleanup, err := data.NewData(confData, logger, userClient)
	if err != nil {
		return nil, nil, err
	}
	commissionRepo := data.NewCommissionRepo(dataData)
	userRepo := data.NewUserRepo(dataData)
	commissionUseCase := biz.NewCommissionUseCase(commissionRepo, logger, userRepo)
	commissionService := service.NewCommissionService(commissionUseCase)
	walletRepo := data.NewWalletRepo(dataData)
	walletUseCase := biz.NewWalletUseCase(walletRepo, logger)
	walletService := service.NewWalletService(walletUseCase)
	middleware := server.NewBasicMiddleware(logger)
	grpcServer := server.NewGRPCServer(confServer, logger, commissionService, walletService, middleware)
	httpServer := server.NewHTTPServer(confServer, logger, commissionService, middleware, walletService)
	registrar := server.NewRegistrar(logger, registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
